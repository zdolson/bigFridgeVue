{"remainingRequest":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/babel-loader/lib/index.js!/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/src/components/TableView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/src/components/TableView.vue","mtime":1539726931358},{"path":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/cache-loader/dist/cjs.js","mtime":1539726978099},{"path":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/cache-loader/dist/cjs.js","mtime":1539726978099},{"path":"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/zachary/Documents/Projects/big-fridge-vue/big-fridge/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\nvar sortStates = {};\nvar numericFilters = new Set();\nexport default {\n  data: function data() {\n    return {\n      filters: ['name', 'quantity', 'store', 'type', 'purchaseDate', 'expirationDate', 'expired'],\n      numericFilters: numericFilters,\n      sortNumImgs: [\"sort-numeric-up\", \"sort-numeric-down\", \"sort\"],\n      sortAlphaImgs: [\"sort-alpha-up\", \"sort-alpha-down\", \"sort\"],\n      sortStates: sortStates\n    };\n  },\n  components: {\n    'font-awesome-icon': FontAwesomeIcon\n  },\n  created: function created() {\n    this.numericFilters.add('quantity');\n    this.numericFilters.add('purchaseDate');\n    this.numericFilters.add('expirationDate');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.filters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var filter = _step.value;\n\n        if (this.numericFilters.has(filter)) {\n          this.sortStates = Object.assign({}, this.sortStates, _defineProperty({}, filter, {\n            state: 2,\n            img: this.sortNumImgs[2]\n          }));\n        } else {\n          this.sortStates = Object.assign({}, this.sortStates, _defineProperty({}, filter, {\n            state: 2,\n            img: this.sortAlphaImgs[2]\n          }));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  },\n  methods: {\n    fireMessage: function fireMessage(input) {\n      this.$emit('apply-filter', input); //designed to avoid going back to original state.\n\n      this.sortStates[input].state = (this.sortStates[input].state + 1) % 2;\n      if (this.numericFilters.has(input)) this.sortStates[input].img = this.sortNumImgs[this.sortStates[input].state];else this.sortStates[input].img = this.sortAlphaImgs[this.sortStates[input].state];\n      this.$emit('apply-sort', {\n        state: this.sortStates[input].state,\n        from: input\n      });\n    },\n    aggregate: function aggregate() {\n      this.$emit('apply-aggregate');\n    }\n  },\n  computed: {\n    nameImg: {\n      get: function get() {\n        return this.sortStates['name'].img;\n      }\n    },\n    quantityImg: {\n      get: function get() {\n        return this.sortStates['quantity'].img;\n      }\n    },\n    storeImg: {\n      get: function get() {\n        return this.sortStates['store'].img;\n      }\n    },\n    typeImg: {\n      get: function get() {\n        return this.sortStates['type'].img;\n      }\n    },\n    purchaseDateImg: {\n      get: function get() {\n        return this.sortStates['purchaseDate'].img;\n      }\n    },\n    expirationDateImg: {\n      get: function get() {\n        return this.sortStates['expirationDate'].img;\n      }\n    },\n    expiredImg: {\n      get: function get() {\n        return this.sortStates['expired'].img;\n      }\n    }\n  },\n  watch: {\n    clear: function clear() {\n      if (this.clear) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.filters[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var filter = _step2.value;\n\n            if (this.numericFilters.has(filter)) {\n              this.sortStates = Object.assign({}, this.sortStates, _defineProperty({}, filter, {\n                state: 2,\n                img: this.sortNumImgs[2]\n              }));\n            } else {\n              this.sortStates = Object.assign({}, this.sortStates, _defineProperty({}, filter, {\n                state: 2,\n                img: this.sortAlphaImgs[2]\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        this.$emit('wiped-states');\n      }\n    }\n  },\n  props: ['inputArray', 'clear']\n};",{"version":3,"sources":["TableView.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\n\nvar sortStates = {};\nvar numericFilters = new Set();\n\nexport default {\n    data: function () {\n      return {\n          filters: ['name', 'quantity', 'store', 'type', 'purchaseDate', 'expirationDate', 'expired'],\n          numericFilters,\n          sortNumImgs: [\"sort-numeric-up\", \"sort-numeric-down\", \"sort\"],\n          sortAlphaImgs: [\"sort-alpha-up\", \"sort-alpha-down\", \"sort\"],\n          sortStates,\n      }\n    },\n    components: {\n        'font-awesome-icon': FontAwesomeIcon,\n    },\n    created: function(){\n        this.numericFilters.add('quantity');\n        this.numericFilters.add('purchaseDate');\n        this.numericFilters.add('expirationDate');\n        for (let filter of this.filters){\n            if (this.numericFilters.has(filter)){\n                this.sortStates = Object.assign({}, this.sortStates, {\n                    [filter]: {\n                        state: 2,\n                        img: this.sortNumImgs[2],\n                    }\n                })\n            } else {\n                this.sortStates = Object.assign({}, this.sortStates, {\n                    [filter]: {\n                        state: 2,\n                        img: this.sortAlphaImgs[2],\n                    }\n                })\n            }\n        }\n    },\n    methods: {\n        fireMessage: function(input){\n            this.$emit('apply-filter', input);\n             //designed to avoid going back to original state.\n            this.sortStates[input].state = (this.sortStates[input].state + 1) % 2;\n            if (this.numericFilters.has(input)) this.sortStates[input].img = this.sortNumImgs[this.sortStates[input].state];\n            else this.sortStates[input].img = this.sortAlphaImgs[this.sortStates[input].state];\n            this.$emit('apply-sort', {\n                state: this.sortStates[input].state,\n                from: input,\n            });\n        },\n        aggregate: function(){\n            this.$emit('apply-aggregate');\n        }\n    },\n    computed: {\n        nameImg: {\n            get: function(){\n                return this.sortStates['name'].img;\n            }\n        },\n        quantityImg: {\n            get: function(){\n                return this.sortStates['quantity'].img;\n            }\n        },\n        storeImg: {\n            get: function(){\n                return this.sortStates['store'].img;\n            }\n        },\n        typeImg: {\n            get: function(){\n                return this.sortStates['type'].img;\n            }\n        },\n        purchaseDateImg: {\n            get: function(){\n                return this.sortStates['purchaseDate'].img;\n            }\n        },\n        expirationDateImg: {\n            get: function(){\n                return this.sortStates['expirationDate'].img;\n            }\n        },\n        expiredImg: {\n            get: function(){\n                return this.sortStates['expired'].img;\n            }\n        }\n    },\n    watch: {\n        clear: function(){\n            if (this.clear){\n                for (let filter of this.filters){\n                    if (this.numericFilters.has(filter)){\n                        this.sortStates = Object.assign({}, this.sortStates, {\n                            [filter]: {\n                                state: 2,\n                                img: this.sortNumImgs[2],\n                            }\n                        })\n                    } else {\n                        this.sortStates = Object.assign({}, this.sortStates, {\n                            [filter]: {\n                                state: 2,\n                                img: this.sortAlphaImgs[2],\n                            }\n                        })\n                    }\n                }\n                this.$emit('wiped-states');\n            }\n        }\n    },\n    props: ['inputArray', 'clear'],\n}\n\n</script>\n\n<template>\n\n    <div class=\"tile\">\n        <table>\n            <thead class=\"fixed-table-header\">\n                <tr>\n                    <th>\n                        <button\n                        class=\"filter-button\"\n                        @click=\"fireMessage('name')\"\n                        >Name <font-awesome-icon\n                            :icon=\"nameImg\"\n                            ></font-awesome-icon>\n                        </button>\n                    </th>\n                    <th>\n                        <button class=\"filter-button\"\n                        @click=\"fireMessage('quantity')\"\n                        style=\"margin-right: 3px;\"\n                        >Quantity <font-awesome-icon\n                            :icon=\"quantityImg\"\n                            ></font-awesome-icon>\n                        </button>\n                        <button\n                        class=\"filter-button\"\n                        @click=\"aggregate()\"\n                        >Aggregate <font-awesome-icon\n                            icon=\"plus\"\n                            ></font-awesome-icon>\n                        </button>\n                    </th>\n                    <th>\n                        <button class=\"filter-button\"\n                            @click=\"fireMessage('store')\"\n                            >Store <font-awesome-icon\n                                :icon=\"storeImg\"\n                                ></font-awesome-icon>\n                        </button>\n                    </th>\n                    <th>\n                        <button class=\"filter-button\"\n                            @click=\"fireMessage('type')\"\n                            >Type <font-awesome-icon\n                                :icon=\"typeImg\"\n                                ></font-awesome-icon>\n                        </button>\n                    </th>\n                    <th>\n                        <button class=\"filter-button\"\n                            @click=\"fireMessage('purchaseDate')\"\n                            >Purchase Date <font-awesome-icon\n                                :icon=\"purchaseDateImg\"\n                                ></font-awesome-icon>\n                        </button>\n                    </th>\n                    <th>\n                        <button class=\"filter-button\"\n                            @click=\"fireMessage('expirationDate')\"\n                            >Expiration Date <font-awesome-icon\n                                :icon=\"expirationDateImg\"\n                                ></font-awesome-icon></button></th>\n                    <th>\n                        <button class=\"filter-button\"\n                            @click=\"fireMessage('expired')\"\n                            >Expired? <font-awesome-icon\n                                :icon=\"expiredImg\"\n                                ></font-awesome-icon>\n                        </button>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"(item, index) in inputArray\" :key=\"index\">\n                    <td>{{item.name}}</td>\n                    <td>{{item.quantity}}</td>\n                    <td>{{item.store}}</td>\n                    <td>{{item.type}}</td>\n                    <td>{{item.purchaseDate}}</td>\n                    <td>{{item.expirationDate}}</td>\n                    <td><font-awesome-icon\n                        :icon=\"item.expired=='-' ?\n                            'slash' :\n                            (item.expired ?\n                                'skull' :\n                                'thumbs-up'\n                            )\"\n                        ></font-awesome-icon>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n</template>\n\n<style scoped>\n\n.fixed-table-header{\n    position: sticky;\n    top: 0;\n    background-color: #90a4ae;\n    display: block;\n}\n\ntbody, thead tr {\n    display: table;\n    width: 100%;\n    table-layout: fixed;\n}\n</style>\n"],"sourceRoot":"src/components"}]}